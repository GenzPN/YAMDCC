<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cfgApplying" xml:space="preserve">
    <value>Applying the YAMDCC config from CurrentConfig.xml...</value>
  </data>
  <data name="cfgInvalid" xml:space="preserve">
    <value>The YAMDCC config is outdated/invalid.
Make sure the latest version of YAMDCC (and the YAMDCC Service)
are installed, then run the YAMDCC configurator and apply a config at least once.</value>
  </data>
  <data name="cfgLoading" xml:space="preserve">
    <value>Reloading service config...</value>
  </data>
  <data name="cfgLoadSuccess" xml:space="preserve">
    <value>Config loaded successfully!</value>
  </data>
  <data name="cfgNotFound" xml:space="preserve">
    <value>The YAMDCC configurator has not been run yet (CurrentConfig.xml not found).
Please run YAMDCC configurator and apply a config at least once.</value>
  </data>
  <data name="drvLoad" xml:space="preserve">
    <value>Loading WinRing0 driver for EC access...</value>
  </data>
  <data name="drvLoadFail" xml:space="preserve">
    <value>Failed to load the WinRing0 driver, required for EC read/write access.
Check the FAQ for common fixes. If the issue still occurs, open a bug report
with this log attached.</value>
  </data>
  <data name="drvLoadSuccess" xml:space="preserve">
    <value>WinRing0 driver loaded successfully!</value>
  </data>
  <data name="drvUnload" xml:space="preserve">
    <value>Unloading WinRing0 driver...</value>
  </data>
  <data name="errArgsBadLength" xml:space="preserve">
    <value>Received a command with incorrect number of arguments.</value>
  </data>
  <data name="errArgsBadType" xml:space="preserve">
    <value>Received a command with incorrect type of arguments.</value>
  </data>
  <data name="errArgsMissing" xml:space="preserve">
    <value>Received a command that expected arguments, but no arguments were specified.</value>
  </data>
  <data name="errBadCmd" xml:space="preserve">
    <value>Unknown command received: {0}</value>
  </data>
  <data name="errECLock" xml:space="preserve">
    <value>Could not acquire EC bus lock.</value>
  </data>
  <data name="errECRead" xml:space="preserve">
    <value>Failed to read from EC register 0x{0:X2}: {1}</value>
  </data>
  <data name="errECWrite" xml:space="preserve">
    <value>Failed to write to EC register 0x{0:X2}: {1}</value>
  </data>
  <data name="errOffendingCmd" xml:space="preserve">
    <value>Offending command: {0}
Args: {1}</value>
  </data>
  <data name="ipcConnect" xml:space="preserve">
    <value>Client connected to service (ID: {0})</value>
  </data>
  <data name="ipcDC" xml:space="preserve">
    <value>Client disconnected from service (ID: {0})</value>
  </data>
  <data name="svcDesc" xml:space="preserve">
    <value>This service provides functionality to apply settings from YAMDCC (Yet Another MSI Dragon Center Clone) configs to this computer. If this service's Startup Type is set to Manual, YAMDCC configs will not be applied on system startup. If this service is disabled, the YAMDCC configurator will not run, and YAMDCC configs will not be applied.</value>
  </data>
  <data name="svcECReading" xml:space="preserve">
    <value>Reading EC register 0x{0:X2}...</value>
  </data>
  <data name="svcECReadSuccess" xml:space="preserve">
    <value>Successfully read EC register 0x{0:X2} (value: 0x{1:X2}).</value>
  </data>
  <data name="svcECWriteSuccess" xml:space="preserve">
    <value>Wrote to EC register 0x{0:X2} successfully.</value>
  </data>
  <data name="svcECWriting" xml:space="preserve">
    <value>Writing value 0x{0:X2} to EC register 0x{1:X2}...</value>
  </data>
  <data name="svcException" xml:space="preserve">
    <value>Unhandled exception occurred: {0}</value>
  </data>
  <data name="svcStarted" xml:space="preserve">
    <value>Service was started successfully!</value>
  </data>
  <data name="svcStarting" xml:space="preserve">
    <value>Starting YAMDCC service...</value>
  </data>
  <data name="svcStopped" xml:space="preserve">
    <value>Service was stopped successfully.</value>
  </data>
  <data name="svcStopping" xml:space="preserve">
    <value>Stopping YAMDCC service...</value>
  </data>
  <data name="warnArgsBadLength" xml:space="preserve">
    <value>Received a command that expected no arguments, but arguments were passed. Ignoring.</value>
  </data>
  <data name="svcWritingCustomRegs" xml:space="preserve">
    <value>Writing custom EC register configs ({0}/{1})...</value>
  </data>
  <data name="svcWritingFans" xml:space="preserve">
    <value>Writing fan curve configuration for {0} ({1}/{2})...</value>
  </data>
  <data name="svcWritingChgLim" xml:space="preserve">
    <value>Writing charge limit configuration...</value>
  </data>
  <data name="svcWritingPerfMode" xml:space="preserve">
    <value>Writing performance mode setting...</value>
  </data>
  <data name="svcWritingKeySwap" xml:space="preserve">
    <value>Writing Win/Fn key swap setting...</value>
  </data>
  <data name="svcSetKeyLightBright" xml:space="preserve">
    <value>Setting keyboard backlight brightness to {0}...</value>
  </data>
  <data name="svcGetKeyLightBright" xml:space="preserve">
    <value>Getting keyboard backlight brightness...</value>
  </data>
  <data name="ipcError" xml:space="preserve">
    <value>IPC error occurred (connection to ID: {0}): {1}</value>
  </data>
</root>