<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ttApply" xml:space="preserve">
    <value>Click to save and apply the current set of hotkey bindings to the computer.</value>
  </data>
  <data name="ttRevert" xml:space="preserve">
    <value>Click to revert hotkey bindings to the last applied settings.</value>
  </data>
  <data name="ttExit" xml:space="preserve">
    <value>Click to quit the Hotkey Handler.
Hotkeys will not be handled while the Hotkey handler is not running.</value>
  </data>
  <data name="ttEnabled" xml:space="preserve">
    <value>Click to toggle hotkey handling while the hotkey config window is hidden.

Note that hotkey handling will always be disabled while this config
window is open regardless of this setting.</value>
  </data>
  <data name="ttTrayMin" xml:space="preserve">
    <value>Click to toggle whether the Hotkey Handler config window should be minimised
to the system tray when clicking the Minimise button.

Note that hotkey handling will be disabled while the Hotkey
Handler window is minimised to the taskbar
(this will be fixed in a future release).</value>
  </data>
  <data name="ttTrayClose" xml:space="preserve">
    <value>Click to toggle whether the Hotkey Handler config window should be minimised
to the system tray when clicking the Close button.

If unchecked, this will cause the Close button to exit Hotkey Handler entirely
(and therefore hotkeys won't be handled).</value>
  </data>
  <data name="exSvcTimeout" xml:space="preserve">
    <value>Failed to connect to the YAMDCC service (connection timed out).</value>
  </data>
  <data name="ttHkAction" xml:space="preserve">
    <value>Click to change the action that will be triggered when the
associated hotkey is pressed (except for `None`).</value>
  </data>
  <data name="ttHkDel" xml:space="preserve">
    <value>Click to delete this hotkey binding.</value>
  </data>
  <data name="ttHkAdd" xml:space="preserve">
    <value>Click to insert a new hotkey binding after this one.</value>
  </data>
  <data name="ttHkFanProf" xml:space="preserve">
    <value>Click to change the fan profile that will be applied when the
associated hotkey is pressed.

If set to "&lt;next fan profile&gt;", the hotkey will cycle through
all available fan profiles on each hotkey press instead.</value>
  </data>
  <data name="ttHkPerfMode" xml:space="preserve">
    <value>Click to change the default performance mode that will be
applied when the associated hotkey is pressed.

If set to "&lt;next perf. mode&gt;", the hotkey will cycle through
all available performance modes on each hotkey press instead.</value>
  </data>
  <data name="dlgNoAdmin" xml:space="preserve">
    <value>If you see this message, Hotkey Handler is not running as an Administrator.

Please re-run this program as Administrator
(by right-clicking on this program and clicking "Run as administrator").</value>
  </data>
  <data name="dlgSvcStopped" xml:space="preserve">
    <value>The YAMDCC service is currently not running.
Please run the YAMDCC Config Editor to start it.</value>
  </data>
  <data name="dlgSvcNotInstalled" xml:space="preserve">
    <value>The YAMDCC service is not installed.
Please run the YAMDCC Config Editor to install it.</value>
  </data>
</root>