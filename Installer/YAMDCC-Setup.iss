; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define AppName "YAMDCC"
#define AppNameCE "Config Editor"
#define AppNameHH "Hotkey Handler"
#define AppVer "1.1.0"
#define AppPublisher "Sparronator9999"
#define AppURL "https://github.com/Sparronator9999/YAMDCC"
#define AppExeCE "ConfigEditor.exe"
#define AppExeHH "HotkeyHandler.exe"
#define DotNetRoot32 "{win}\Microsoft.NET\Framework\v4.0.30319"
#define DotNetRoot64 "{win}\Microsoft.NET\Framework64\v4.0.30319"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{AFE03526-3AAD-40FA-AF49-03A0150C4229}
AppName={#AppName}
AppVersion={#AppVer}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#AppPublisher}
AppPublisherURL={#AppURL}
AppSupportURL={#AppURL}
AppUpdatesURL={#AppURL}
ArchitecturesAllowed=x86compatible or x64compatible
ArchitecturesInstallIn64BitMode=x64compatible
Compression=lzma/ultra64
DefaultDirName={autopf}\{#AppPublisher}\{#AppName}
DisableProgramGroupPage=yes
LicenseFile=Installer\LICENSE.rtf
OutputBaseFilename=YAMDCC-v{#AppVer}-Setup
SetupIconFile=YAMDCC.Updater\fan-update.ico
SolidCompression=yes
SourceDir=..
Uninstallable=Not WizardIsTaskSelected('portable')
UninstallDisplayIcon={app}\{#AppNameCE}
WizardStyle=modern
WizardSmallImageFile=Installer\fan-update.bmp

[CustomMessages]
english.Portable=Portable mode (don't create uninstaller files or entries)
english.DeskIcons=Create desktop icons
english.DeskIconsCommon=For all users
english.DeskIconsUser=For the current user only
english.LaunchCE=Launch config editor

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "portable"; Description: "{cm:Portable}"; Flags: unchecked
Name: "deskicons"; Description: "{cm:DeskIcons}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "deskicons\common"; Description: "{cm:DeskIconsCommon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: exclusive unchecked
Name: "deskicons\user"; Description: "{cm:DeskIconsUser}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: exclusive unchecked

[Files]
Source: "YAMDCC.ConfigEditor\bin\Debug\net48\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#AppName}\{#AppNameCE}"; Filename: "{app}\{#AppExeCE}"
Name: "{autoprograms}\{#AppName}\{#AppNameHH}"; Filename: "{app}\{#AppExeHH}"
Name: "{commondesktop}\{#AppName} {#AppNameCE}"; Filename: "{app}\{#AppExeCE}"; Tasks: deskicons\common
Name: "{commondesktop}\{#AppName} {#AppNameHH}"; Filename: "{app}\{#AppExeHH}"; Tasks: deskicons\common
Name: "{userdesktop}\{#AppName} {#AppNameCE}"; Filename: "{app}\{#AppExeCE}"; Tasks: deskicons\user
Name: "{userdesktop}\{#AppName} {#AppNameHH}"; Filename: "{app}\{#AppExeHH}"; Tasks: deskicons\user

[Run]
; TODO: check if YAMDCC service is already installed
Filename: "{#DotNetRoot64}\InstallUtil.exe"; Parameters: """{app}\yamdccsvc.exe"""; StatusMsg: "Installing YAMDCC service..."; Check: Not Is64BitInstallMode; Flags: logoutput runhidden
Filename: "{#DotNetRoot64}\InstallUtil.exe"; Parameters: """{app}\yamdccsvc.exe"""; StatusMsg: "Installing YAMDCC service..."; Check: Is64BitInstallMode; Flags: logoutput runhidden
Filename: "{sys}\net.exe"; Parameters: "start yamdccsvc"; StatusMsg: "Starting YAMDCC service..."; Flags: logoutput runhidden
Filename: "{app}\{#AppExeCE}"; Description: "{cm:LaunchCE}"; Flags: nowait postinstall runascurrentuser skipifsilent

[UninstallRun]
; Stop and uninstall YAMDCC service before deleting program files
; TODO: check if YAMDCC service is already stopped/uninstalled
Filename: "{sys}\net.exe"; Parameters: "stop yamdccsvc"; RunOnceId: "StopSvc"; Flags: logoutput runhidden
Filename: "{#DotNetRoot64}\InstallUtil.exe"; Parameters: "/u ""{app}\yamdccsvc.exe"""; RunOnceId: "DelSvc32"; Check: Not Is64BitInstallMode; Flags: logoutput runhidden
Filename: "{#DotNetRoot64}\InstallUtil.exe"; Parameters: "/u ""{app}\yamdccsvc.exe"""; RunOnceId: "DelSvc64"; Check: Is64BitInstallMode; Flags: logoutput runhidden

[Code]
#ifdef UNICODE
  #define AW "W"
#else
  #define AW "A"
#endif

const
  SC_MANAGER_CONNECT = $0001;

  SERVICE_CONTROL_STOP = $00000001;

  SERVICE_STOPPED = $00000001;
  SERVICE_START_PENDING = $00000002;
  SERVICE_STOP_PENDING = $00000003;
  SERVICE_RUNNING = $00000004;
  SERVICE_CONTINUE_PENDING = $00000005;
  SERVICE_PAUSE_PENDING = $00000006;
  SERVICE_PAUSED = $00000007;

  ERROR_SERVICE_DOES_NOT_EXIST = $0424;

type
  TSCHandle = THandle;

  TServiceStatus = record
    dwServiceType: DWORD;
    dwCurrentState: DWORD;
    dwControlsAccepted: DWORD;
    dwWin32ExitCode: DWORD;
    dwServiceSpecificExitCode: DWORD;
    dwCheckPoint: DWORD;
    dwWaitHint: DWORD;
  end;

function OpenService(hSCManager: TSCHandle; lpServiceName: string; dwDesiredAccess: DWORD): TSCHandle;
  external 'OpenService{#AW}@advapi32.dll stdcall';
function OpenSCManager(lpMachineName: string; lpDatabaseName: string; dwDesiredAccess: DWORD): TSCHandle;
  external 'OpenSCManager{#AW}@advapi32.dll stdcall';
function QueryServiceStatus(hService: TSCHandle; out lpServiceStatus: TServiceStatus): BOOL;
  external 'QueryServiceStatus@advapi32.dll stdcall';
function CloseServiceHandle(hSCObject: TSCHandle): BOOL;
  external 'CloseServiceHandle@advapi32.dll stdcall';
function ControlService(hService: TSCHandle; dwControl: DWORD; out lpServiceStatus: TServiceStatus): BOOL;
  external 'ControlService@advapi32.dll stdcall';

function GetWin32ErrorMsg() : String;
begin
  Result := SysErrorMessage(DllGetLastError()) + ' (' + IntToStr(DllGetLastError()) + ')';
end;

//function GetNETRuntimePath(): String;
//var
//  RuntimePath: String;
//begin
//  if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Client\', 'InstallPath', RuntimePath) then
//    Result := RuntimePath
//  else
//    Result := '';
//end;

// partially based on: https://stackoverflow.com/a/32476546
function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  hSCM: TSCHandle;
  hService: TSCHandle;
  ServiceStatus: TServiceStatus;
begin
  Log('Checking if YAMDCC service is already installed...')
  hSCM := OpenSCManager('', '', SC_MANAGER_CONNECT);
  if hSCM <> 0 then
  begin
    hService := OpenService(hSCM, 'yamdccsvc', $0024);  //SERVICE_QUERY_STATUS | SERVICE_STOP
    if hService <> 0 then
    begin
      if QueryServiceStatus(hService, ServiceStatus) then
      begin
        Log('YAMDCC service is already installed, querying service status...');
        if ServiceStatus.dwCurrentState = SERVICE_STOPPED then
          Log('YAMDCC service is already stopped.')
        else
        begin
          Log('YAMDCC service is running! Stopping it...');
          if ControlService(hService, SERVICE_CONTROL_STOP, ServiceStatus) then
            Log('YAMDCC service stop requested successfully.')
          else
            Result := 'Failed to stop YAMDCC service: ' + GetWin32ErrorMsg() + #10#10 +
             'Please try stopping it manually with `net stop yamdccsvc` before proceeding with the installation.';
        end;
      end
      else
        if DllGetLastError() = ERROR_SERVICE_DOES_NOT_EXIST then
          Log('YAMDCC service is not installed.')
        else
          Result := 'Failed to query status of YAMDCC service: ' + GetWin32ErrorMsg() + #10#10 +
            'This is likely a bug, and therefore should be reported to `https://github.com/Sparronator9999/YAMDCC/issues/new`.';
      CloseServiceHandle(hService);
    end;
    CloseServiceHandle(hSCM);
  end;
end;
